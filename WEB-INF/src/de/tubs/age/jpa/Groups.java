/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package de.tubs.age.jpa;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Transient;

import org.apache.commons.fileupload.FileItem;
import org.hibernate.annotations.Cascade;



/**
 *
 * @author Maciej Apelgrim
 */
@Entity
public class Groups extends Model{
//create table Item (id bigint generated by default as identity (start with 1), name varchar(255), size integer not null, visibility bit not null, group_id bigint, style_id bigint, primary key (id))
    
	public boolean isOrdered() {
		return ordered;
	}
	public void setOrdered(boolean ordered) {
		this.ordered = ordered;
	}
	@Id @GeneratedValue(strategy=GenerationType.IDENTITY)
    private int id;
	
	 //   @JoinColumn(name="GAME_ID") @ManyToOne(fetch=FetchType.LAZY)
    @ManyToOne
    private Game game;
	
	private String name;

    @OneToOne
    private Style style;

 //   @Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE,org.hibernate.annotations.CascadeType.DELETE,
 //       org.hibernate.annotations.CascadeType.MERGE,org.hibernate.annotations.CascadeType.PERSIST})
  // @OneToMany(mappedBy="groups",cascade = CascadeType.REMOVE)
   @OneToMany(cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REFRESH,CascadeType.REMOVE}, mappedBy = "groups")
   @Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE,org.hibernate.annotations.CascadeType.REMOVE,
            org.hibernate.annotations.CascadeType.MERGE,org.hibernate.annotations.CascadeType.PERSIST})
    private List<Item> items = new ArrayList<Item>();

    private boolean visibility;
    private boolean stacked;
    private boolean randomgenerator;
    private boolean ordered;

    


    public Groups(){
      //  items = new ArrayList<Item>();
        style = new Style();
  //      System.out.println("#####   public Groups()");
    }
        public Groups(String name, Style style, boolean visibility, boolean stacked, boolean randomgenerator, boolean ordered) {
        this.name = name;
        this.style = style;
        this.visibility = visibility;
        this.stacked = stacked;
        this.randomgenerator = randomgenerator;
        this.ordered =  ordered;
        items = new ArrayList<Item>();
    }
    /**
     * @return the name
     */
    public String getName() {
        return name;
    }

    /**
     * @param name the name to set
     */
    public void setName(String name) {
  //       System.out.println("#####  Group setName(String name):"+name);
        this.name = name;
    }

    /**
     * @return the style
     */
    public Style getStyle() {
        return style;
    }

    /**
     * @param style the style to set
     */
    public void setStyle(Style style) {
        this.style = style;
    }

    /**
     * @return the items
     */

    public List<Item> getItems() {
        return items;
    }

    /**
     * @param items the items to set
     */
    public void setItems(List<Item> items) {
        this.items = items;
    }

    /**
     * @return the visibility
     */
    public boolean isVisibility() {
        return visibility;
    }

    /**
     * @param visibility the visibility to set
     */
    public void setVisibility(boolean visibility) {
        this.visibility = visibility;
    }

    /**
     * @return the stacked
     */
    public boolean isStacked() {
        return stacked;
    }

    /**
     * @param stacked the stacked to set
     */
    public void setStacked(boolean stacked) {
        this.stacked = stacked;
    }

    /**
     * @return the randomgenerator
     */
    public boolean isRandomgenerator() {
        return randomgenerator;
    }

    /**
     * @param randomgenerator the randomgenerator to set
     */
    public void setRandomgenerator(boolean randomgenerator) {
        this.randomgenerator = randomgenerator;
    }

    /**
     * @return the _private
     */
    public boolean isPrivate() {
        return ordered;
    }

    /**
     * @param private the _private to set
     */
    public void setPrivate(boolean _private) {
    //    this.ordered = ordered;
    }

    /**
     * @return the game
    
    public Game getGame() {
        return game;
    }

    public void setGame(Game game) {
        this.game = game;
    }
 */
    void saveAll(String path,EntityManager em) throws IOException {
        style.saveAll(path,em);
        for (Item item : items) {
        	item.setGroups(this);
            item.saveAll(path,em);
        }
        save(em);
    }
	/**
	 *     private int id;


    @OneToOne


    @OneToMany(mappedBy="group", cascade=CascadeType.ALL)
    private List<Item> items;


	 * @return
	 */
	public String toJSON() {
		StringBuffer sb = new StringBuffer();
		sb.append("{id:"+id+",name:'" + name + "',visibility:" + visibility + ",stacked:"+stacked+",randomgenerator:"+randomgenerator+",order:"+ordered
				+ ",style:"+style.toJSON()+",items:[");
		boolean first = true;
		for (Item item : items) {
			if(first){
				sb.append(item.toJSON());
				first = false;
			}
			else sb.append(","+item.toJSON());	
		}
		sb.append("]}");
		return sb.toString();
	}

   public String toString(){
	   return "name:" + name + ",visibility:" + visibility + ",stacked:"+stacked+",randomgenerator:"+randomgenerator+",order:"+ordered;
   }
public void setId(int id) {
	this.id = id;
}
public int getId() {
	return id;
}
public void setGame(Game game) {
	this.game = game;
}
public Game getGame() {
	return game;
}
public Groups copy(String key) {
	List<Item> _items = new ArrayList<Item>();
	for (Item item : this.items) {
		_items.add(item.copy(key));
	}
	Groups group = new Groups(name,style.copy(key), visibility,stacked,randomgenerator, ordered);
	group.setItems(_items);
	return group;
}




}
